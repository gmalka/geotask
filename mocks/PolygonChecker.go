// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	geo "gitlab.com/ptflp/geotask/geo"
)

// PolygonChecker is an autogenerated mock type for the PolygonChecker type
type PolygonChecker struct {
	mock.Mock
}

// Allowed provides a mock function with given fields:
func (_m *PolygonChecker) Allowed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Contains provides a mock function with given fields: point
func (_m *PolygonChecker) Contains(point geo.Point) bool {
	ret := _m.Called(point)

	var r0 bool
	if rf, ok := ret.Get(0).(func(geo.Point) bool); ok {
		r0 = rf(point)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RandomPoint provides a mock function with given fields:
func (_m *PolygonChecker) RandomPoint() geo.Point {
	ret := _m.Called()

	var r0 geo.Point
	if rf, ok := ret.Get(0).(func() geo.Point); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(geo.Point)
	}

	return r0
}

type mockConstructorTestingTNewPolygonChecker interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolygonChecker creates a new instance of PolygonChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolygonChecker(t mockConstructorTestingTNewPolygonChecker) *PolygonChecker {
	mock := &PolygonChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
