// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/ptflp/geotask/module/order/models"

	time "time"
)

// OrderStorager is an autogenerated mock type for the OrderStorager type
type OrderStorager struct {
	mock.Mock
}

// DeleteByRadius provides a mock function with given fields: ctx, lng, lat, radius, unit
func (_m *OrderStorager) DeleteByRadius(ctx context.Context, lng float64, lat float64, radius float64, unit string) (int, error) {
	ret := _m.Called(ctx, lng, lat, radius, unit)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string) (int, error)); ok {
		return rf(ctx, lng, lat, radius, unit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string) int); ok {
		r0 = rf(ctx, lng, lat, radius, unit)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64, float64, string) error); ok {
		r1 = rf(ctx, lng, lat, radius, unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateUniqueID provides a mock function with given fields: ctx
func (_m *OrderStorager) GenerateUniqueID(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, orderID
func (_m *OrderStorager) GetByID(ctx context.Context, orderID int) (*models.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRadius provides a mock function with given fields: ctx, lng, lat, radius, unit
func (_m *OrderStorager) GetByRadius(ctx context.Context, lng float64, lat float64, radius float64, unit string) ([]models.Order, error) {
	ret := _m.Called(ctx, lng, lat, radius, unit)

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string) ([]models.Order, error)); ok {
		return rf(ctx, lng, lat, radius, unit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string) []models.Order); ok {
		r0 = rf(ctx, lng, lat, radius, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64, float64, string) error); ok {
		r1 = rf(ctx, lng, lat, radius, unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: ctx
func (_m *OrderStorager) GetCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOldOrders provides a mock function with given fields: ctx, maxAge
func (_m *OrderStorager) RemoveOldOrders(ctx context.Context, maxAge time.Duration) error {
	ret := _m.Called(ctx, maxAge)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, maxAge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, order, maxAge
func (_m *OrderStorager) Save(ctx context.Context, order models.Order, maxAge time.Duration) error {
	ret := _m.Called(ctx, order, maxAge)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order, time.Duration) error); ok {
		r0 = rf(ctx, order, maxAge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderStorager interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderStorager creates a new instance of OrderStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderStorager(t mockConstructorTestingTNewOrderStorager) *OrderStorager {
	mock := &OrderStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
